import json
from channels.generic.websocket import AsyncWebsocketConsumer
from .models import Message, Room
from django.contrib.auth.models import User
from asgiref.sync import sync_to_async
from django.utils import timezone
from django.contrib.auth import get_user_model

class ChatConsumer(AsyncWebsocketConsumer):
    # –•—Ä–∞–Ω–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
    connected_users = {}
    
    # –ë—É—Ñ–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    message_buffer = {}
    
    async def connect(self):
        self.room_slug = self.scope['url_route']['kwargs']['room_slug']
        self.room_group_name = f'chat_{self.room_slug}'
        self.user = self.scope["user"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.user.is_anonymous:
            print("‚ùå –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            await self.close()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        room_exists = await self.check_room_exists(self.room_slug)
        if not room_exists:
            print(f"‚ùå –ö–æ–º–Ω–∞—Ç–∞ {self.room_slug} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await self.close()
            return

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ –∫–æ–º–Ω–∞—Ç—ã
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()
        print(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {self.user.username} –∫ –∫–æ–º–Ω–∞—Ç–µ {self.room_slug}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        await self.add_user_to_room()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        await self.send_online_users()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'user_joined',
                'username': self.user.username,
                'timestamp': timezone.now().isoformat()
            }
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.send_history()

    async def disconnect(self, close_code):
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(self, 'room_group_name') and not self.user.is_anonymous:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            await self.remove_user_from_room()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.send_online_users()
            
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'user_left',
                    'username': self.user.username,
                    'timestamp': timezone.now().isoformat()
                }
            )
            
            await self.channel_layer.group_discard(
                self.room_group_name,
                self.channel_name
            )
        
        print(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {self.user.username if not self.user.is_anonymous else 'Anonymous'}")

    async def receive(self, text_data):
        try:
            text_data_json = json.loads(text_data)
            message = text_data_json.get('message', '').strip()
            username = text_data_json.get('username', '')
            
            if not message:
                return

            print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {message}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_exists = await self.check_user_exists(username)
            if not user_exists:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                await self.send(text_data=json.dumps({
                    'type': 'error',
                    'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }))
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            saved_message = await self.save_message(username, self.room_slug, message)

            if saved_message:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
                await self.add_message_to_buffer(saved_message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
                await self.channel_layer.group_send(
                    self.room_group_name,
                    {
                        'type': 'chat_message',
                        'message': message,
                        'username': username,
                        'message_id': saved_message.id,
                        'timestamp': saved_message.date_added.isoformat() if saved_message.date_added else timezone.now().isoformat(),
                        'is_buffered': False  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_buffered
                    }
                )
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ù–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø –ë–£–§–ï–†–ò–ó–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–ô
    async def add_message_to_buffer(self, message_obj):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–Ω–∞—Ç—ã"""
        if self.room_slug not in self.message_buffer:
            self.message_buffer[self.room_slug] = []
        
        message_data = {
            'id': message_obj.id,
            'message': message_obj.content,
            'username': message_obj.user.username,
            'timestamp': message_obj.date_added.isoformat() if message_obj.date_added else timezone.now().isoformat()
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
        self.message_buffer[self.room_slug].append(message_data)
        if len(self.message_buffer[self.room_slug]) > 20:
            self.message_buffer[self.room_slug] = self.message_buffer[self.room_slug][-20:]
        
        print(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ {message_obj.id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä –∫–æ–º–Ω–∞—Ç—ã {self.room_slug}")

    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –°–û–û–ë–©–ï–ù–ò–ô:

    async def chat_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –í–°–ï–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        print(f"üì§ –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event['username']} –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
        await self.send(text_data=json.dumps({
            'type': 'new_message',
            'message': event['message'],
            'username': event['username'],
            'message_id': event.get('message_id'),
            'timestamp': event.get('timestamp'),
            'is_buffered': event.get('is_buffered', False)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_buffered
        }))

    async def user_joined(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event['username']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è")
        await self.send(text_data=json.dumps({
            'type': 'user_activity',
            'activity': 'joined',
            'username': event['username'],
            'timestamp': event.get('timestamp'),
            'message': f"{event['username']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É"
        }))

    async def user_left(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event['username']} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")
        await self.send(text_data=json.dumps({
            'type': 'user_activity',
            'activity': 'left',
            'username': event['username'],
            'timestamp': event.get('timestamp'),
            'message': f"{event['username']} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç"
        }))

    async def online_users(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        await self.send(text_data=json.dumps({
            'type': 'online_users',
            'users': event['users'],
            'count': event['count']
        }))

    # –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò –û–ù–õ–ê–ô–ù

    async def add_user_to_room(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –∫–æ–º–Ω–∞—Ç–µ"""
        if self.room_slug not in self.connected_users:
            self.connected_users[self.room_slug] = set()
        
        self.connected_users[self.room_slug].add(self.user.username)
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É {self.room_slug}")

    async def remove_user_from_room(self):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –∫–æ–º–Ω–∞—Ç–µ"""
        if self.room_slug in self.connected_users:
            if self.user.username in self.connected_users[self.room_slug]:
                self.connected_users[self.room_slug].remove(self.user.username)
                print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.user.username} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–Ω–∞—Ç—ã {self.room_slug}")
                
                # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–µ (–Ω–æ –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
                if len(self.connected_users[self.room_slug]) == 0:
                    del self.connected_users[self.room_slug]

    async def send_online_users(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–°–ï–ú –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        if self.room_slug in self.connected_users:
            users = list(self.connected_users[self.room_slug])
            users_count = len(users)
            
            await self.channel_layer.group_send(
                self.room_group_name,
                {
                    'type': 'online_users',
                    'users': users,
                    'count': users_count
                }
            )
            print(f"üë• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")

    @sync_to_async
    def check_user_exists(self, username):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return get_user_model().objects.filter(username=username).exists()

    @sync_to_async
    def check_room_exists(self, room_slug):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"""
        return Room.objects.filter(slug=room_slug).exists()

    @sync_to_async  
    def save_message(self, username, room_slug, message):  
        try:
            user = get_user_model().objects.get(username=username)
            room = Room.objects.get(slug=room_slug)  

            message_obj = Message.objects.create(user=user, room=room, content=message)
            print(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {username} –≤ –∫–æ–º–Ω–∞—Ç–µ {room_slug} (ID: {message_obj.id})")
            return message_obj
        except get_user_model().DoesNotExist:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return None
        except Room.DoesNotExist:
            print(f"‚ùå –ö–æ–º–Ω–∞—Ç–∞ {room_slug} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    @sync_to_async
    def get_room_messages(self, room_slug, limit=50):
        try:
            room = Room.objects.get(slug=room_slug)
            messages = Message.objects.filter(room=room).select_related('user').order_by('date_added')[:limit]
            
            messages_list = []
            for msg in messages:
                messages_list.append({
                    'id': msg.id,
                    'message': msg.content,
                    'username': msg.user.username,
                    'date_added': msg.date_added.isoformat() if msg.date_added else None
                })
            return messages_list
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []

    async def send_history(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        messages = await self.get_room_messages(self.room_slug)
        await self.send(text_data=json.dumps({
            'type': 'history',
            'messages': messages
        }))
        print(f"üìö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {self.user.username}")